from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os, requests

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: photo, description, location
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_states[chat_id] = {"step": "photo"}
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ —Ä–∏–±–æ–ª–æ–≤–ª—ñ üì∏")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_states.get(chat_id, {})
    
    if state.get("step") != "photo":
        await update.message.reply_text("–Ø –∑–∞—Ä–∞–∑ —á–µ–∫–∞—é —ñ–Ω—à–∏–π –µ—Ç–∞–ø. –Ø–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫ ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
        return

    photo = update.message.photo[-1]
    file = await photo.get_file()
    os.makedirs("temp", exist_ok=True)
    path = f"temp/{chat_id}.jpg"
    await file.download_to_drive(path)

    user_states[chat_id] = {
        "step": "description",
        "photo_path": path
    }

    await update.message.reply_text("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å üé£.")

async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_states.get(chat_id, {})

    if state.get("step") != "description":
        await update.message.reply_text("–ó–∞—Ä–∞–∑ —è —á–µ–∫–∞—é —ñ–Ω—à–∏–π –µ—Ç–∞–ø. –ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    user_states[chat_id]["description"] = update.message.text
    user_states[chat_id]["step"] = "location"

    await update.message.reply_text(
        "–î—è–∫—É—é! ‚úÖ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç —Ü—å–æ–≥–æ –º—ñ—Å—Ü—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_states.get(chat_id, {})

    if state.get("step") != "location":
        await update.message.reply_text("–Ø –∑–∞—Ä–∞–∑ —á–µ–∫–∞—é —ñ–Ω—à–∏–π –µ—Ç–∞–ø. –ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    lat = update.message.location.latitude
    lon = update.message.location.longitude
    description = state.get("description")
    photo_path = state.get("photo_path")

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    with open(photo_path, "rb") as img:
        response = requests.post("http://localhost:8000/add_report",
                                 files={"image": img},
                                 data={
                                     "lat": lat,
                                     "lon": lon,
                                     "description": description
                                 })

    # –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    os.remove(photo_path)
    user_states.pop(chat_id, None)

    if response.status_code == 200:
        await update.message.reply_text("‚úÖ –ó–≤—ñ—Ç –¥–æ–¥–∞–Ω–æ! –î—è–∫—É—é –∑–∞ —É—á–∞—Å—Ç—å.")
    else:
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–≤—ñ—Ç—É.")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ü–æ—á–Ω–∏ –∑ /start.")

def main():
    app = Application.builder().token("8391256868:AAGzJD1VMqNDZfvSnTavBdHSQko13Tl1ENE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_description))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()

if __name__ == "__main__":
    main()
